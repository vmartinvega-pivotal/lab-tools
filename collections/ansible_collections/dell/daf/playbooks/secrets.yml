---
- name: Print secrets
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Set namespace
      ansible.builtin.set_fact:
        namespace: tools

    - name: Set fact for created secrets
      ansible.builtin.set_fact:
        created_secrets: {}

    - name: Update created secrets
      ansible.builtin.set_fact:
        created_secrets: >-
          {{
            created_secrets | combine({
              "ddvault": {
                "sysadmin": groups['ddvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='users_password') | first,
                "ddofficer": groups['ddvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='officer_password') | first,
                "users": groups['ddvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='users_password') | first
              }
            }, recursive=True)
          }}

    - name: Update created secrets
      ansible.builtin.set_fact:
        created_secrets: >-
          {{
            created_secrets | combine({
              "crvault": {
                "admin": groups['crvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='admin_password') | first,
                "root": groups['crvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='root_password') | first,
                "lockbox": groups['crvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='lockbox_password') | first,
                "crso": groups['crvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='crso_password') | first,
                "mongodb": groups['crvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='mongodb_password') | first,
                "users": groups['crvault'] | map('extract', hostvars) | map(attribute='config') | map(attribute='users_password') | first
              }
            }, recursive=True)
          }}

    - name: Update created secrets
      ansible.builtin.set_fact:
        created_secrets: >-
          {{
            created_secrets | combine({
              "kubeflow": {
                "user": hostvars['kubeflow']['frontend']['username'],
                "password": hostvars['kubeflow']['frontend']['password']
              }
            }, recursive=True)
          }}

    - name: Get MLFlow admin secrets
      ansible.builtin.include_role:
        name: dell.daf.common
        tasks_from: get_secret
      vars:
        secret_name: mlflow-tracking
        secret_key_name: admin-user

    - name: Set user for mlflow
      ansible.builtin.set_fact:
        mlflow_username: "{{ secret }}"
      when: secret | length > 0

    - name: Get MLFlow admin secrets
      ansible.builtin.include_role:
        name: dell.daf.common
        tasks_from: get_secret
      vars:
        secret_name: mlflow-tracking
        secret_key_name: admin-password

    - name: Update created secrets
      ansible.builtin.set_fact:
        created_secrets: >-
          {{
            created_secrets | combine({
              "mlflow": {
                "username": mlflow_username,
                "password": secret
              }
            }, recursive=True)
          }}
      when: secret | length > 0

    - name: Get Concourse admin secret
      ansible.builtin.include_role:
        name: dell.daf.common
        tasks_from: get_secret
      vars:
        secret_name: concourse-web
        secret_key_name: local_users

    - name: Update created secrets
      ansible.builtin.set_fact:
        created_secrets: >-
          {{
            created_secrets | combine({
              "concourse": {
                "username": secret.split(':')[0],
                "password": secret.split(':')[1]
              }
            }, recursive=True)
          }}
      when: secret | length > 0

    - name: Get Grafana admin secret
      ansible.builtin.include_role:
        name: dell.daf.common
        tasks_from: get_secret
      vars:
        secret_name: grafana-admin
        secret_key_name: GF_SECURITY_ADMIN_PASSWORD

    - name: Update created secrets
      ansible.builtin.set_fact:
        created_secrets: >-
          {{
            created_secrets | combine({
              "grafana": {
                "username": "admin",
                "password": secret.split(':')[0]
              }
            }, recursive=True)
          }}
      when: secret | length > 0

    # - name: Gitea block
    #   when: toolset['svc'] == "gitea"
    #   block:
    #     - name: Include role to get Gitea admin secret
    #       ansible.builtin.include_role:
    #         name: dell.daf.common
    #         tasks_from: get_secret
    #       vars:
    #         secret_name: gitea
    #         secret_key_name: admin-password

    #     - name: Update DAF created secrets
    #       ansible.builtin.set_fact:
    #         daf_created_secrets: >-
    #           {{
    #             daf_created_secrets | combine({
    #               "gitea": {
    #                 "username": gitea['helm_chart_values']['adminUsername'],
    #                 "password": secret
    #               }
    #             }, recursive=True)
    #           }}

    # - name: Harbor block
    #   when: toolset['registry'] == "harbor"
    #   block:
    #     - name: Include role to get Harbor admin secret
    #       ansible.builtin.include_role:
    #         name: dell.daf.common
    #         tasks_from: get_secret
    #       vars:
    #         secret_name: harbor-core-envvars
    #         secret_key_name: HARBOR_ADMIN_PASSWORD

    #     - name: Update DAF created secrets
    #       ansible.builtin.set_fact:
    #         daf_created_secrets: >-
    #           {{
    #             daf_created_secrets | combine({
    #               "harbor": {
    #                 "username": "admin",
    #                 "password": secret
    #               }
    #             }, recursive=True)
    #           }}

    # - name: Minio block
    #   when: toolset['object_storage'] == "minio"
    #   block:
    #     - name: Include role to get Minio admin secret
    #       ansible.builtin.include_role:
    #         name: dell.daf.common
    #         tasks_from: get_secret
    #       vars:
    #         secret_name: minio
    #         secret_key_name: root-password

    #     - name: Update DAF created secrets
    #       ansible.builtin.set_fact:
    #         daf_created_secrets: >-
    #           {{
    #             daf_created_secrets | combine({
    #               "minio": {
    #                 "username": "admin",
    #                 "password": secret
    #               }
    #             }, recursive=True)
    #           }}

    - name: Print created secrets
      ansible.builtin.debug:
        var: created_secrets

---
- name: Deploy Data Domain
  hosts: "{{ variable_hosts }}"
  connection: local
  gather_facts: false
  tasks:
    - name: Set fact for local folder
      ansible.builtin.set_fact:
        local_folder: "{{ lookup('env', 'LOCAL_FOLDER') or '/tmp' }}"

    - name: Check if vm exists
      community.vmware.vmware_vm_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: false
        folder: "/{{ datacenter_name }}/vm/{{ folder }}"
      register: vms_info

    - name: Shutdown VM
      community.vmware.vmware_guest_powerstate:
        name: "{{ name }}"
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs }}"
        datacenter: "{{ datacenter_name }}"
        state_change_timeout: 200
        state: powered-off
      when: vms_info.virtual_machines | selectattr('guest_name', '==', name) | length > 0
      delegate_to: localhost

    - name: Delete VM
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs }}"
        datacenter: "{{ datacenter_name }}"
        name: "{{ name }}"
        state: absent
      when: vms_info.virtual_machines | selectattr('guest_name', '==', name) | length > 0
      delegate_to: localhost
      
    - name: Check if the ova exists locally
      ansible.builtin.stat:
        path: "{{ local_folder }}/{{ ova.name }}"
      register: ova_response

    - name: Download the ova
      ansible.builtin.include_role:
        name: dell.daf.vcenter
        tasks_from: get_from_datastore
      vars:
        vc_server: "{{ vcenter_hostname }}"
        vc_username: "{{ vcenter_username }}"
        vc_password: "{{ vcenter_password }}"
        datastore: "{{ datastore_name }}"
        source_path: "ova/dell/datadomain/{{ ova.name }}"
        target_path: "{{ local_folder }}/{{ ova.name }}"
      when: not ova_response.stat.exists

    - name: Deploy ova
      ansible.builtin.include_role:
        name: dell.daf.ova
      vars:
        vm_name: "{{ name }}"
        vm_folder: "{{ folder }}"

    - name: Wait for the VM to be up and with ip
      dell.daf.esxi_vm:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        vm_name: "{{ name }}"
        retries: 60
        delay: 5
      register: esxi_vm_output
      no_log: true

    - name: Initialize DD
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: initialize
      vars:
        dd_initial_host: "{{ esxi_vm_output['vm_details']['ip_addresses'] | first }}"
        dd_user: sysadmin
        dd_initial_password: changeme
        dd_new_password: "{{ config.sysadmin_password }}"
        dd_user_officer: "{{ config.officer_user }}"
        dd_user_officer_password: "{{ config.officer_password }}"
        dd_fqdn: "{{ config.fqdn }}"
        dd_domain: "{{ config.domain }}"
        dd_ethv0_ip: "{{ config.network.ethv0.ip }}"
        dd_ethv0_netmask: "{{ config.network.ethv0.netmask }}"
        dd_ethv1_ip: "{{ config.network.ethv1.ip }}"
        dd_ethv1_netmask: "{{ config.network.ethv1.netmask }}"
        dd_default_gateway: "{{ config.default_gateway }}"
        dd_dns: "{{ config.dns }}"

    - name: Add disk to Data Domain
      ansible.builtin.include_role:
        name: dell.daf.vcenter
        tasks_from: add_hard_disk
      vars:
        vc_server: "{{ vcenter_hostname }}"
        vc_username: "{{ vcenter_username }}"
        vc_password: "{{ vcenter_password }}"
        vm_name: "{{ name }}"
        datastore: "{{ datastore_name }}"
        vm_hard_disk_capacity_gb: 400
        disk_persistence: IndependentPersistent
        storage_format: Thin

    - name: Pause for 1 minute for the disk to be available in DD
      ansible.builtin.pause:
        minutes: 1

    - name: Set facts 
      ansible.builtin.set_fact:
        dd_hostname: "{{ inventory_hostname }}"
        dd_username: sysadmin
        dd_password: "{{ config.sysadmin_password }}"

    - name: Login dd
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: login

    - name: DD get disks
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: get_disks

    - name: Set facts for available disks
      ansible.builtin.set_fact:
        datadomain_available_disks: >-
            {{
              dd_get_disks_result['json']['diskInfo'] |
              selectattr("status", "eq", "UNKNOWN") |
              selectattr("tierType", "eq", "OTHER") |
              map(attribute='device')
            }}

    - name: ADD disks to active tier
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: add_disks_active_tier
      vars:
        dd_add_disks__disks: "{{ datadomain_available_disks }}"

    - name: Create FS
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: fs_operation
      vars:
        fs_operation__operation: create

    - name: Enable FS
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: fs_operation
      vars:
        fs_operation__operation: enable

    - name: Answer first login questions
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: ddve_first_login

    - name: Get ddboost info
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: get_ddboost

    - name: Enable ddboost
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: enable_ddboost
      when: dd_getddboost_response.json.ddboost_status == 'disabled'

    - name: Add network extra interfaces
      community.vmware.vmware_guest_network:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        datacenter: "{{ datacenter_name }}"
        validate_certs: false
        name: "{{ name }}"
        mac_address: "{{ item.mac }}"
        network_name: "{{ item.network }}"
        device_type: "{{ item.device_type }}"
        connected: true
        state: present
      loop: "{{ config.extra_interfaces }}"
      delegate_to: localhost

    - name: Shutdown VM
      community.vmware.vmware_guest_powerstate:
        name: "{{ name }}"
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs }}"
        datacenter: "{{ datacenter_name }}"
        state_change_timeout: 200
        state: powered-off
        
    - name: Poweredon VM
      community.vmware.vmware_guest_powerstate:
        name: "{{ name }}"
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: "{{ vcenter_validate_certs }}"
        datacenter: "{{ datacenter_name }}"
        state_change_timeout: 200
        state: powered-on

    - name: Wait for the VM to be up and with ip
      dell.daf.esxi_vm:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        vm_name: "{{ name }}"
        wait_for_ip: "{{ config.network.ethv0.ip }}"
        retries: 60
        delay: 5
      register: esxi_vm_output
      no_log: true

    - name: Configure extra interfaces
      ansible.builtin.include_role:
        name: dell.daf.dd
        tasks_from: apply_command
      vars:
        apply_command__command: 
          command: "net config {{ item.interface }} {{ item.ip }} netmask {{ item.netmask }} up"
          check_success: (.*)done(.*)
        apply_command__hostname: "{{ config.network.ethv0.ip }}"
        apply_command__username: sysadmin
        apply_command__password: "{{ config.sysadmin_password }}"
      loop: "{{ config.extra_interfaces }}"
